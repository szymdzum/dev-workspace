name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Setup Nx SHAs
        uses: nrwl/nx-set-shas@v4
      
      - name: Lint affected
        run: pnpm nx affected -t lint --parallel=3
      
      - name: Test Everything Else in Parallel
        run: pnpm nx affected -t test --exclude=ui --parallel=3 --coverage
      
      - name: Test UI Alone Like The Diva It Is
        run: pnpm nx run ui:test --coverage
      
      - name: Build affected
        run: pnpm nx affected -t build --parallel=3

  security:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Security audit
        run: pnpm audit
      
      - name: üîí Check for ACTUAL secrets
        run: |
          # Look for actual patterns, not every mention of "token"
          if grep -r -E "(sk-[a-zA-Z0-9]{48}|ghp_[a-zA-Z0-9]{36}|npm_[a-zA-Z0-9]{36}|AIza[a-zA-Z0-9]{35}|AKIA[a-zA-Z0-9]{16})" \
              --include="*.ts" --include="*.js" --include="*.json" \
              --exclude-dir=node_modules --exclude-dir=.git \
              --exclude-dir=dist --exclude-dir=.nx .; then
            echo "‚ùå Actual secrets found (not just the word 'token')"
            exit 1
          fi
          echo "‚úÖ No real secrets detected (token_usage is safe, calm down)"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-mcp-servers:
    runs-on: ubuntu-latest
    needs: build
    
    strategy:
      matrix:
        server: [mcp-agent-roles, nx-mcp]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Build MCP server
        run: |
          cd tools/${{ matrix.server }}
          pnpm build
      
      - name: Upload MCP server artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.server }}-dist
          path: tools/${{ matrix.server }}/dist/
          retention-days: 7